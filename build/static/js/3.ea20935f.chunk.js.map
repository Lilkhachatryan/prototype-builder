{"version":3,"sources":["components/settings/ButtonSettings/ButtonSettings.js"],"names":["ButtonSettings","state","rect","props","currentElement","objects","text","componentDidUpdate","prevProps","newAtts","setState","handleChange","event","type","index","value","target","newInputs","elementChange","rx","ry","className","onChange","_","this","fill","step","strokeWidth","stroke","name","min","max","opacity","fontSize","lineHeight","charSpacing","fontFamily","map","el","key","style","fontWeight","textDecoration","fontStyle","Component"],"mappings":"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","file":"static/js/3.ea20935f.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { fontFamily } from '../../../utils/helpers';\r\n\r\nimport './ButtonSettings.scss';\r\n\r\nclass ButtonSettings extends Component {\r\n    state = {\r\n        rect: {\r\n            ...this.props.currentElement.objects[0]\r\n        },\r\n        text: {\r\n            ...this.props.currentElement.objects[1]\r\n        }\r\n    };\r\n\r\n    componentDidUpdate = (prevProps) => {\r\n        if (prevProps.currentElement !== this.props.currentElement) {\r\n            const newAtts = {\r\n                rect: {\r\n                    ...this.props.currentElement.objects[0]\r\n                },\r\n                text: {\r\n                    ...this.props.currentElement.objects[1]\r\n                }\r\n            };\r\n            this.setState({ ...newAtts });\r\n        }\r\n    };\r\n\r\n    handleChange = (event, type, index) => {\r\n        let value = event.target.value;\r\n        if (index === 0) {\r\n            let newInputs = { ...this.state.rect };\r\n            newInputs[type] = value;\r\n            this.setState({ rect: newInputs });\r\n        } else {\r\n            let newInputs = { ...this.state.text };\r\n            if (type === 'textDecoration') {\r\n                this.props.elementChange({ 'underline': false, 'linethrough': false, 'overline': false }, 1);\r\n                type = value;\r\n                value = true;\r\n            }\r\n            newInputs[type] = value;\r\n            this.setState({ text: newInputs });\r\n        }\r\n\r\n        if (type === 'fontSize' || type === 'strokeWidth' || type === 'fontWeight' || type === 'lineHeight') {\r\n            value = +value;\r\n        }\r\n        if (type === 'charSpacing') {\r\n            value = +value * 25;\r\n        }\r\n\r\n        if (type === 'ry') {\r\n            this.props.elementChange({ rx: value, ry: value }, index);\r\n        } else {\r\n            this.props.elementChange({ [type]: value }, index);\r\n        }\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"buttonSettings\">\r\n                <div className='mb-3 flexInput'>\r\n                    <label>Fill &nbsp;</label>\r\n                    <input\r\n                        type=\"color\"\r\n                        onChange={(_) => this.handleChange(_, 'fill', 0)}\r\n                        value={this.state.rect.fill} />\r\n                </div>\r\n                <div className='mb-3 flexInput'>\r\n                    <label>Stroke Width (px)</label>\r\n                    <input\r\n                        className='field-styling' type=\"number\" step=\"1\" value={this.state.rect.strokeWidth}\r\n                        onChange={(_) => this.handleChange(_, 'strokeWidth', 0)} />\r\n                </div>\r\n\r\n                <div className='mb-3 flexInput'>\r\n                    <label>Stroke Color &nbsp;</label>\r\n                    <input\r\n                        type=\"color\"\r\n                        onChange={(_) => this.handleChange(_, 'stroke', 0)}\r\n                        value={this.state.rect.stroke}\r\n                    />\r\n                </div>\r\n                <div className='mb-3 flexInput'>\r\n                    <label>Border radius (px)</label>\r\n                    <input\r\n                        className='field-styling' type=\"number\" value={this.state.rect.ry}\r\n                        onChange={(_) => this.handleChange(_, 'ry', 0)} />\r\n                </div>\r\n                <div className='mb-3 flexInput'>\r\n                    <label>Opacity:</label>\r\n                    <input\r\n                        className='field-styling'\r\n                        type=\"range\"\r\n                        name=\"opacity\"\r\n                        min=\"0\"\r\n                        max=\"1\"\r\n                        step=\"0.05\"\r\n                        value={this.props.currentElement.opacity}\r\n                        onChange={(_) => this.handleChange(_, 'opacity')}\r\n                    />\r\n                </div>\r\n                <h6 className=\"mt-3\">Text styles</h6>\r\n                <div className=\"mb-3 flexInput\">\r\n                    <label>{this.props.currentElement.type === 'button' ? 'Button text' : 'Placeholder'}</label>\r\n                    <input type=\"text\" value={this.state.text.text} onChange={(_) => this.handleChange(_, 'text', 1)}/>\r\n                </div>\r\n\r\n                <div className='mb-3 flexInput'>\r\n                    <label>Text Color</label>\r\n                    <input\r\n                        type=\"color\"\r\n                        onChange={(_) => this.handleChange(_, 'fill', 1)}\r\n                        value={this.state.text.fill} />\r\n                </div>\r\n                <div className='mb-3 flexInput'>\r\n                    <label>Font Size (px)</label>\r\n                    <input\r\n                        className='field-styling' type=\"number\" value={this.state.text.fontSize}\r\n                        onChange={(_) => this.handleChange(_, 'fontSize', 1)} />\r\n                </div>\r\n                <div className='mb-3 flexInput'>\r\n                    <label>Line height (em)</label>\r\n                    <input\r\n                        className='field-styling' type=\"number\" step=\"0.1\" value={this.state.text.lineHeight}\r\n                        onChange={(_) => this.handleChange(_, 'lineHeight', 1)} />\r\n                </div>\r\n                <div className='mb-3 flexInput'>\r\n                    <label>Letter spacing</label>\r\n                    <input\r\n                        className='field-styling' type=\"number\" step=\"1\" value={this.state.text.charSpacing / 25}\r\n                        onChange={(_) => this.handleChange(_, 'charSpacing', 1)} />\r\n                </div>\r\n                <div className='mb-3 flexInput'>\r\n                    <label>Font Family</label>\r\n                    <select className='field-styling' onChange={(_) => this.handleChange(_, 'fontFamily', 1)}\r\n                        value={this.state.text.fontFamily}>\r\n                        {fontFamily.map(el => (\r\n                            <option key={el} value={el} style={{ fontFamily: el }}>{el}</option>\r\n                        ))}\r\n                    </select>\r\n                </div>\r\n                <div className='mb-3 flexInput'>\r\n                    <label>Font Weight</label>\r\n                    <select\r\n                        className='field-styling' onChange={(_) => this.handleChange(_, 'fontWeight', 1)}\r\n                        value={this.state.text.fontWeight}>\r\n                        <option value=\"0\"></option>\r\n                        <option value=\"300\">300</option>\r\n                        <option value=\"400\">400</option>\r\n                        <option value=\"500\">500</option>\r\n                        <option value=\"600\">600</option>\r\n                        <option value=\"700\">700</option>\r\n                        <option value=\"900\">900</option>\r\n                    </select>\r\n                </div>\r\n                <div className='mb-3 flexInput'>\r\n                    <label>Text Decoration</label>\r\n                    <select\r\n                        className='field-styling' onChange={(_) => this.handleChange(_, 'textDecoration', 1)}\r\n                        value={this.state.text.textDecoration}>\r\n                        <option value=\"\">None</option>\r\n                        <option value=\"underline\">Underline</option>\r\n                        <option value=\"linethrough\">Linethrough</option>\r\n                        <option value=\"overline\">Overline</option>\r\n                    </select>\r\n                </div>\r\n                <div className='mb-3 flexInput'>\r\n                    <label>Font Style</label>\r\n                    <select\r\n                        className='field-styling' onChange={(_) => this.handleChange(_, 'fontStyle', 1)}\r\n                        value={this.state.text.fontStyle}>\r\n                        <option value=\"normal\">Normal</option>\r\n                        <option value=\"italic\">Italic</option>\r\n                    </select>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ButtonSettings;\r\n"],"sourceRoot":""}