{"version":3,"sources":["components/settings/LineSettings/LineSettings.js"],"names":["LineSettings","state","inputs","strokeWidth","props","currentElement","stroke","opacity","componentDidUpdate","prevProps","newAtts","setState","handleChange","event","type","value","target","newInputs","elementChange","className","step","this","onChange","_","name","min","max","React","Component"],"mappings":"yMAEMA,E,4MAEFC,MAAQ,CACJC,OAAQ,CACJC,YAAa,EAAKC,MAAMC,eAAeF,YACvCG,OAAQ,EAAKF,MAAMC,eAAeC,OAClCC,QAAS,EAAKH,MAAMC,eAAeE,U,EAI3CC,mBAAqB,SAACC,GAClB,GAAIA,EAAUJ,iBAAmB,EAAKD,MAAMC,eAAgB,CACxD,IAAMK,EAAU,CACZP,YAAa,EAAKC,MAAMC,eAAeF,YACvCG,OAAQ,EAAKF,MAAMC,eAAeC,OAClCC,QAAS,EAAKH,MAAMC,eAAeE,SAEvC,EAAKI,SAAS,CAACT,OAAQQ,M,EAI/BE,aAAe,SAACC,EAAOC,GACnB,IAAIC,EAAQF,EAAMG,OAAOD,MACrBE,EAAS,eAAO,EAAKhB,MAAMC,QAC/Be,EAAUH,GAAQC,EAClB,EAAKJ,SAAS,CAACT,OAAQe,IAEV,YAATH,GAA+B,gBAATA,IACtBC,GAASA,GAGb,EAAKX,MAAMc,cAAX,eAA2BJ,EAAOC,K,uDAG5B,IAAD,OACL,OACI,6BACI,yBAAKI,UAAU,kBACX,oDACA,2BACIA,UAAU,gBAAgBL,KAAK,SAASM,KAAK,IAAIL,MAAOM,KAAKpB,MAAMC,OAAOC,YAC1EmB,SAAU,SAACC,GAAD,OAAO,EAAKX,aAAaW,EAAG,mBAE9C,yBAAKJ,UAAU,kBACX,+CACA,2BACIL,KAAK,QACLQ,SAAU,SAACC,GAAD,OAAO,EAAKX,aAAaW,EAAG,WACtCR,MAAOM,KAAKpB,MAAMC,OAAOI,UAGjC,yBAAKa,UAAU,kBACX,2CACA,2BACIL,KAAK,QACLU,KAAK,UACLC,IAAI,IACJC,IAAI,IACJN,KAAK,OACLL,MAAOM,KAAKpB,MAAMC,OAAOK,QACzBe,SAAU,SAACC,GAAD,OAAO,EAAKX,aAAaW,EAAG,oB,GA5DnCI,IAAMC,WAoElB5B","file":"static/js/7.57477710.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass LineSettings extends React.Component {\r\n\r\n    state = {\r\n        inputs: {\r\n            strokeWidth: this.props.currentElement.strokeWidth,\r\n            stroke: this.props.currentElement.stroke,\r\n            opacity: this.props.currentElement.opacity\r\n        }\r\n    };\r\n\r\n    componentDidUpdate = (prevProps) => {\r\n        if (prevProps.currentElement !== this.props.currentElement) {\r\n            const newAtts = {\r\n                strokeWidth: this.props.currentElement.strokeWidth,\r\n                stroke: this.props.currentElement.stroke,\r\n                opacity: this.props.currentElement.opacity\r\n            };\r\n            this.setState({inputs: newAtts});\r\n        }\r\n    };\r\n\r\n    handleChange = (event, type) => {\r\n        let value = event.target.value;\r\n        let newInputs = {...this.state.inputs};\r\n        newInputs[type] = value;\r\n        this.setState({inputs: newInputs});\r\n\r\n        if (type === 'opacity' || type === 'strokeWidth') {\r\n            value = +value;\r\n        }\r\n\r\n        this.props.elementChange({[type]: value});\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className='mb-3 flexInput'>\r\n                    <label>Stroke Width (px)</label>\r\n                    <input\r\n                        className='field-styling' type=\"number\" step=\"1\" value={this.state.inputs.strokeWidth}\r\n                        onChange={(_) => this.handleChange(_, 'strokeWidth')}/>\r\n                </div>\r\n                <div className='mb-3 flexInput'>\r\n                    <label>Stroke Color</label>\r\n                    <input\r\n                        type=\"color\"\r\n                        onChange={(_) => this.handleChange(_, 'stroke')}\r\n                        value={this.state.inputs.stroke}\r\n                    />\r\n                </div>\r\n                <div className='mb-3 flexInput'>\r\n                    <label>Opacity:</label>\r\n                    <input\r\n                        type=\"range\"\r\n                        name=\"opacity\"\r\n                        min=\"0\"\r\n                        max=\"1\"\r\n                        step=\"0.05\"\r\n                        value={this.state.inputs.opacity}\r\n                        onChange={(_) => this.handleChange(_, 'opacity')}\r\n                    />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default LineSettings;\r\n"],"sourceRoot":""}