{"version":3,"sources":["components/settings/TextSettings/TextSettings.js"],"names":["TextSettings","state","inputs","props","currentElement","componentDidUpdate","prevProps","newAtts","setState","handleChange","event","type","value","target","newInputs","elementChange","className","onChange","_","this","fill","fontSize","step","lineHeight","charSpacing","fontFamily","map","el","key","style","fontWeight","name","id","checked","textAlign","htmlFor","icon","faAlignLeft","faAlignCenter","faAlignRight","faAlignJustify","textDecoration","fontStyle","strokeWidth","stroke","React","Component"],"mappings":"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","file":"static/js/5.ab83b711.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport { faAlignCenter, faAlignJustify, faAlignLeft, faAlignRight } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { fontFamily } from '../../../utils/helpers';\r\n\r\nimport './TextSettings.scss';\r\n\r\nclass TextSettings extends React.Component {\r\n\r\n    state = {\r\n        inputs: {\r\n            ...this.props.currentElement\r\n        }\r\n    };\r\n\r\n    componentDidUpdate = (prevProps) => {\r\n        if (prevProps.currentElement !== this.props.currentElement) {\r\n            const newAtts = {\r\n                ...this.props.currentElement\r\n            };\r\n            this.setState({ inputs: newAtts });\r\n        }\r\n    };\r\n\r\n    handleChange = (event, type) => {\r\n        let value = event.target.value;\r\n        let newInputs = { ...this.state.inputs };\r\n        newInputs[type] = value;\r\n        this.setState({ inputs: newInputs });\r\n\r\n        if (type === 'fontSize' || type === 'strokeWidth' || type === 'fontWeight' || type === 'lineHeight') {\r\n            value = +value;\r\n        }\r\n        if (type === 'charSpacing') {\r\n            value = +value * 25;\r\n        }\r\n\r\n        if (type === 'textDecoration') {\r\n            this.props.elementChange({ 'underline': false, 'linethrough': false, 'overline': false });\r\n            type = value;\r\n            value = true;\r\n        }\r\n        this.props.elementChange({ [type]: value });\r\n\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className='textSettings itemSettings'>\r\n                <div className='mb-3 flexInput'>\r\n                    <label>Text Color</label>\r\n                    <input\r\n                        type='color'\r\n                        onChange={(_) => this.handleChange(_, 'fill')}\r\n                        value={this.state.inputs.fill} />\r\n                </div>\r\n                <div className='mb-3 flexInput'>\r\n                    <label>Font Size (px)</label>\r\n                    <input type='number' value={this.state.inputs.fontSize} className='field-styling'\r\n                        onChange={(_) => this.handleChange(_, 'fontSize')} />\r\n                </div>\r\n                <div className='mb-3 flexInput'>\r\n                    <label>Line height (em)</label>\r\n                    <input type='number' step='0.1' value={this.state.inputs.lineHeight} className='field-styling'\r\n                        onChange={(_) => this.handleChange(_, 'lineHeight')} />\r\n                </div>\r\n                <div className='mb-3 flexInput'>\r\n                    <label>Letter spacing</label>\r\n                    <input\r\n                        className='field-styling' type=\"number\" step=\"1\" value={this.state.inputs.charSpacing}\r\n                        onChange={(_) => this.handleChange(_, 'charSpacing')} />\r\n                </div>\r\n                <div className='mb-3 flexInput'>\r\n                    <label>Font Family</label>\r\n                    <select className='field-styling' onChange={(_) => this.handleChange(_, 'fontFamily')}\r\n                        value={this.state.inputs.fontFamily}>\r\n                        {fontFamily.map(el => (\r\n                            <option key={el} value={el} style={{ fontFamily: el }}>{el}</option>\r\n                        ))}\r\n                    </select>\r\n                </div>\r\n                <div className='mb-3 flexInput'>\r\n                    <label>Font Weight</label>\r\n                    <select className='field-styling' onChange={(_) => this.handleChange(_, 'fontWeight')}\r\n                        value={this.state.inputs.fontWeight}>\r\n                        <option value='0'></option>\r\n                        <option value='300'>300</option>\r\n                        <option value='400'>400</option>\r\n                        <option value='500'>500</option>\r\n                        <option value='600'>600</option>\r\n                        <option value='700'>700</option>\r\n                        <option value='900'>900</option>\r\n                    </select>\r\n                </div>\r\n                <div>\r\n                    <div className='textAlignSettings'>\r\n                        <div>\r\n                            <input\r\n                                type='radio'\r\n                                name='textAlign'\r\n                                value='left'\r\n                                id='left'\r\n                                className='field-styling'\r\n                                onChange={(_) => this.handleChange(_, 'textAlign')}\r\n                                checked={this.state.inputs.textAlign === 'left'} />\r\n                            <label htmlFor='left'><FontAwesomeIcon icon={faAlignLeft} /></label>\r\n                        </div>\r\n                        <div>\r\n                            <input\r\n                                type='radio'\r\n                                name='textAlign'\r\n                                value='center'\r\n                                id='center'\r\n                                className='field-styling'\r\n                                onChange={(_) => this.handleChange(_, 'textAlign')}\r\n                                checked={this.state.inputs.textAlign === 'center'} />\r\n                            <label htmlFor='center'><FontAwesomeIcon icon={faAlignCenter} /></label>\r\n                        </div>\r\n                        <div>\r\n                            <input\r\n                                type='radio'\r\n                                name='textAlign'\r\n                                value='right'\r\n                                id='right'\r\n                                className='field-styling'\r\n                                onChange={(_) => this.handleChange(_, 'textAlign')}\r\n                                checked={this.state.inputs.textAlign === 'right'} />\r\n                            <label htmlFor='right'><FontAwesomeIcon icon={faAlignRight} /></label>\r\n                        </div>\r\n                        <div>\r\n                            <input\r\n                                type='radio'\r\n                                name='textAlign'\r\n                                value='justify'\r\n                                id='justify'\r\n                                className='field-styling'\r\n                                onChange={(_) => this.handleChange(_, 'textAlign')}\r\n                                checked={this.state.inputs.textAlign === 'justify'} />\r\n                            <label htmlFor='justify'><FontAwesomeIcon icon={faAlignJustify} /></label>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className='mb-3 flexInput'>\r\n                    <label>Text Decoration</label>\r\n                    <select onChange={(_) => this.handleChange(_, 'textDecoration')}\r\n                        value={this.state.inputs.textDecoration} className='field-styling'>\r\n                        <option value=''>None</option>\r\n                        <option value='underline'>Underline</option>\r\n                        <option value='linethrough'>Linethrough</option>\r\n                        <option value='overline'>Overline</option>\r\n                    </select>\r\n                </div>\r\n                <div className='mb-3 flexInput'>\r\n                    <label>Font Style</label>\r\n                    <select className='field-styling' onChange={(_) => this.handleChange(_, 'fontStyle')}\r\n                        value={this.state.inputs.fontStyle}>\r\n                        <option value='normal'>Normal</option>\r\n                        <option value='italic'>Italic</option>\r\n                    </select>\r\n                </div>\r\n                <div className='mb-3 flexInput'>\r\n                    <label>Stroke Width (px)</label>\r\n                    <input type='number' step='0.1' value={this.state.inputs.strokeWidth} className='field-styling'\r\n                        onChange={(_) => this.handleChange(_, 'strokeWidth')} />\r\n                </div>\r\n                <div className='mb-3 flexInput'>\r\n                    <label>Stroke Color</label>\r\n                    <input\r\n                        type='color'\r\n                        onChange={(_) => this.handleChange(_, 'stroke')}\r\n                        value={this.state.inputs.stroke}\r\n                    />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TextSettings;\r\n"],"sourceRoot":""}